// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Building {
  CUC
  GHC
  TEP
}

enum Category {
  ELECTRONICS
  ACCESSORY
}

enum ItemInteraction {
  CREATE
  APPROVE
  UNAPPROVE
  PUBLISH
  UNPUBLISH
  MAKE_AVAILABLE
  MAKE_UNAVAILABLE
  EDIT
  DELETE
  ARCHIVE
  UNARCHIVE
}

model Item {
  id                  String   @id @default(auto()) @map("_id") @db.ObjectId
  name                String
  imageURL String
  shortDescription    String
  extendedDescription String?
  retrieveFrom        Building
  foundBuilding       Building
  foundDescription    String?
  foundTime           DateTime
  categories          Category[]
  isHighValue         Boolean
  published           Boolean
  available           Boolean
  approved            Boolean
  archived            Boolean
}

model ItemInfoSnapshot {
  id                  String    @id @default(auto()) @map("_id") @db.ObjectId
  shortDescription    String?
  extendedDescription String?
  retrieveFrom        Building?
  foundBuilding       Building?
  foundDescription    String?
  foundTime           DateTime?
  category            Category?
  isHighValue         Boolean?
  auditLog            AuditLog  @relation(fields: [auditLogId], references: [id])
  auditLogId          String    @unique
}

model AuditLog {
  id          String            @id @default(auto()) @map("_id") @db.ObjectId
  interaction ItemInteraction
  actor       User              @relation(fields: [actorId], references: [id])
  actorId     String
  change      ItemInfoSnapshot?
  changeId    String?
}

model UserPermission {
  id          String          @id @default(auto()) @map("_id") @db.ObjectId
  interaction ItemInteraction
  actor       User            @relation(fields: [actorId], references: [id])
  actorId     String
  building    Building
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?          @unique
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  sessions       Session[]
  auditLogs      AuditLog[]
  UserPermission UserPermission[]
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
