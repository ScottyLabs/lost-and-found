// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Location {
  CUC
  TEP
  CC
  OC
}

enum Category {
  CLOTHING
  CHARGER
  UMBRELLA
  GLASSES_CASES
  JEWELRY
  WATCHES
  EARBUDS_HEADPHONES_CASES
  PHONE
  LAPTOP
  TABLET
  BEVERAGE_CONTAINER
  STATIONARY
  KEYS
  OTHER
}

enum Color {
  BLACK
  BLUE
  BROWN
  GREEN
  GREY
  MULTICOLOR
  METALLIC
  ORANGE
  PURPLE
  RED
  WHITE
  YELLOW
  OTHER
}

enum ItemInteraction {
  CREATE
  APPROVE
  UNAPPROVE
  ARCHIVE
  UNARCHIVE
  EDIT
  DELETE
}

enum Status {
  PENDING
  APPROVED
  ARCHIVED
}

enum Value {
  LOW
  MEDIUM
  HIGH
}

enum Permission {
  USER
  MODERATOR
  ADMIN
}

model Item {
  id               String     @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  foundDate        DateTime
  foundLocation    String
  shortDescription String
  categories       Category[]
  color            Color
  value            Value
  identifiable     Boolean
  retrieveLocation Location
  longDescription  String?
  auditLogs        AuditLog[]
  status           Status
  createdAt        DateTime   @default(now())
}

model AuditLog {
  id          String          @id @default(auto()) @map("_id") @db.ObjectId
  interaction ItemInteraction
  actor       User            @relation(fields: [actorId], references: [id], onDelete: Cascade)
  actorId     String          @db.ObjectId
  item        Item            @relation(fields: [itemId], references: [id], onDelete: Cascade)
  itemId      String          @db.ObjectId
  createdAt   DateTime        @default(now())
}

model Subscription {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  category  Category
  createdAt DateTime @default(now())
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  notifications Boolean        @default(true)
  permission    Permission     @default(USER)
  accounts      Account[]
  sessions      Session[]
  auditLogs     AuditLog[]
  subscriptions Subscription[]
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
