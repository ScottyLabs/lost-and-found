// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Location {
  AN
  BH
  BK
  CUC
  CIC
  CFA
  DH
  GHC
  HOA
  HBH
  HH
  HL
  III
  MM
  MI
  NSH
  PH
  POS
  PCA
  TEP
  OTHER
}

enum RetrieveLocation {
  CUC
  GHC
}

enum Category {
  BEVERAGE_CONTAINER
  CHARGER
  CLOTHING
  EARBUDS_HEADPHONES_CASES
  GLASSES_CASES
  JEWELRY_WATCHES
  KEYS
  PHONES_LAPTOPS_TABLETS
  STATIONARY
  UMBRELLA
  OTHER
}

enum Color {
  BLACK
  BLUE
  BROWN
  GREEN
  GREY
  MULTICOLOR
  METALLIC
  ORANGE
  PURPLE
  RED
  WHITE
  YELLOW
  OTHER
}

enum ItemInteraction {
  CREATE
  APPROVE
  UNAPPROVE
  ARCHIVE
  UNARCHIVE
  EDIT
  DELETE
}

enum Status {
  PENDING
  APPROVED
  ARCHIVED
}

enum Value {
  GENERAL
  HIGH
}

enum Permission {
  USER
  MODERATOR
  ADMIN
}

model Item {
  id               String     @id @default(cuid())
  name             String
  foundDate        DateTime
  foundLocation    Location
  foundDescription String
  shortDescription String
  categories       Category[]
  color            Color
  value            Value
  identifiable     Boolean
  retrieveLocation RetrieveLocation
  itemLocation     String
  longDescription  String?
  auditLogs        AuditLog[]
  status           Status
  createdAt        DateTime   @default(now())
}

model AuditLog {
  id          String          @id @default(cuid())
  interaction ItemInteraction
  actor       Account            @relation(fields: [actorId], references: [clerkId], onDelete: Cascade)
  actorId     String
  item        Item            @relation(fields: [itemId], references: [id], onDelete: Cascade)
  itemId      String
  createdAt   DateTime        @default(now())
}

model Subscription {
  id        String   @id @default(cuid())
  userId    String
  user      Account     @relation(fields: [userId], references: [clerkId], onDelete: Cascade)
  category  Category
  createdAt DateTime @default(now())

  @@unique([userId, category])
}

model Account {
  clerkId       String         @id @unique
  notifications Boolean        @default(true)
  permission    Permission     @default(USER)
  auditLogs     AuditLog[]
  subscriptions Subscription[]

  @@index([clerkId])
}

model VerificationToken {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
